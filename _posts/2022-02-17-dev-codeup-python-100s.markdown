---
layout: post
title: "[코드업 - 파이썬 기초 100제 해설]"
subtitle:
categories: dev
tags: dev python beginner code-up
comments: true
published: true
---


Before Start
===

codeup.kr에서 제공하는 Python 기초 100제 중 해설이 없는 문제에 대한 풀이만을 기록하였습니다.

꼭 제 방식으로 푸실 이유는 없지만, 제 풀이를 보시면서 참조하시며 프로그래밍 실력을 향상시키셨으면 하여 올립니다.

**안내**

+ 올려드리는 풀이와 관련되어 질문을 블로그에 남기시는 경우 답변을 드립니다.
+ 문제에 대한 모든 저작권은 코드업(<https://codeup.kr/problemsetsol.php?psid=33>)에 있으며, 문제 풀이에 대한 저작권은 이 게시글의 제작자인 본인에게 있습니다.



### 6006 [기초-출력] 출력하기

다음 문장을 출력하시오.

```python
"!@#$%^&*()'
```

(단, 큰따옴표와 작은따옴표도 함께 출력한다.)

---

(풀이)

```python
print('\"!@#$%^&*()\'')

>>> "!@#$%^&*()'
```

### 6007 [기초-출력] 출력하기

다음 경로를 출력하시오.

```python
"C:\Download\'hello'.py"
```

(단, 따옴표도 함께 출력한다.)

---

(풀이)

```python
print('\"C:\\Download\\\'hello\'.py\"')

>>> "C:\Download\'hello'.py"
```

### 6008 [기초-출력] 출력하기

```python
print("Hello\nWorld")
```

위 코드를 정확히 그대로 출력하시오.(공백문자 주의)

---

(풀이)

```python
print("print(\"Hello\\nWorld\")")

>>> print("Hello\nWorld")
```

### 6013 [기초-입출력] 문자 2개 입력 받아 순서 바꾸어 출력하기1

줄을 바꿔 문자(character) 2개를 입력받고, 순서를 바꿔 한 줄씩 출력해보자.

---

(풀이)

```python
char1 = input()
char2 = input()
print(str(char2))
print(str(char1))

>>> 1
>>> 2
>>> 2
>>> 1
```

### 6014 [기초-입출력] 실수 1개 입력 받아 3번 출력하기

실수(real number) 1개를 입력받아 줄을 바꿔 3번 출력해보자.

예시

```python
print(f)  #f에 저장되어있는 값을 출력하고 줄을 바꾼다.
print(f)
print(f)
```

와 같은 방법으로 3번 줄을 바꿔 출력할 수 있다.

---

(풀이)

```python
num = input()
for i in range(0, 3): # for문을 이용하여 3번 반복하도록 만들 수 있다.
    print(float(num))
    
>>> 123.45
>>> 123.45
>>> 123.45
>>> 123.45
```

### 6019 [기초-입출력] 연, 월, 일 입력 받아 순서 바꿔 출력하기

"연도.월.일"을 입력받아 "일-월-연도" 순서로 바꿔 출력해보자.

참고

```python
y, m, d = input().split('.')
```

과 같이 변수들을 순서대로 나열하면 구분기호를 기준으로 잘라 순서대로 저장한다.

---

(풀이)

```python
year, month, day = input().split(".")

print(day, month, year, sep="-")

>>> 22.02.08
>>> 08-02-22
```

### 6020 [기초-입출력] 주민번호 입력 받아 형태 바꾸어 출력하기

주민번호는 다음과 같이 구성된다.

XXXXXX-XXXXXXX

왼쪽 6자리는 생년월일(YYMMDD)이고, 오른쪽 7자리는 성별,출생지역,확인코드로 구성되어있다.

주민번호를 입력받아 형태를 바꿔 출력해보자.

---

(풀이)

```python
birth_date, personal_code = input().split('-')

print(birth_date + personal_code)

>>> 880208-1234567
>>> 8802081234567
```

### 6023 [기초-입출력] 시, 분, 초 입력 받아 분만 출력하기

시:분:초 형식으로 시간이 입력될 때 분만 출력해보자.

---

(풀이)

```python
h, m, s = input().split(':')
print(m)

>>> 12:34:56
>>> 34
```

### 6039 [기초-산술연산] 실수 2개 입력 받아 거듭제곱 계산하기

실수 2개(f1, f2)를 입력받아 f1을 f2번 거듭제곱한 값을 출력하는 프로그램을 작성해보자.

---

(풀이)

```python
f1, f2 = input().split()
print(float(f1) ** float(f2))

>>> 4.0 2.0
>>> 16.0
```

### 6043 [기초-산술연산] 실수 2개 입력 받아 나눈 결과 계산하기

실수 2개(f1, f2)를 입력받아 f1 을 f2 로 나눈 값을 출력해보자. 이 때 소숫점 넷째자리에서 반올림하여 무조건 소숫점 셋째 자리까지 출력한다.

---

(풀이)

```python
f1, f2 = input().split()
print(format(float(f1)/float(f2), ".3f"))

>>> 10.0 3.0
>>> 3.333
```

### 6044 [기초-산술연산] 정수 2개 입력 받아 자동 계산하기

정수 2개(a, b)를 입력받아 합, 차, 곱, 몫, 나머지, 나눈 값을 자동으로 계산해보자. 단 0 <= a, b <= 2147483647, b는 0이 아니다.

---

(풀이)

```python
a, b = input().split()

print(int(a)+int(b))
print(int(a)-int(b))
print(int(a)*int(b))
print(int(a)//int(b))
print(int(a)%int(b))
print(format(int(a)/int(b), ".2f"))

>>> 10 3
>>> 13 
>>> 7
>>> 30
>>> 3
>>> 1
>>> 3.33
```

### 6058 [기초-논리연산] 둘 다 거짓일 경우만 참 출력하기

2개의 정수값이 입력될 때, 그 불(bool) 값(True/False)이 모두 False일 때에만 True를 출력하는 프로그램을 작성하시오.

---

(풀이)

```python
a, b = input().split()

c = bool(int(a))
d = bool(int(b))

print((not c) and (not d))  # 입력된 두 값이 모두 False일 때만 True로 반환됨

>>> 0 0
>>> True
```

### 6069 [기초-조건/선택실행구조] 평가 입력 받아 다르게 출력하기

평가를 문자(A, B, C, D, ...)로 입력받아 내용을 다르게 출력해보자.

평가 내용 평가 : 내용 A : best!!! B : good!! C : run! D : slowly~ 나머지 문자들 : what?

---

(풀이)

```python
grade = input()

if grade == "A":
  print("best!!!")
elif grade == "B":
  print("good!!")
elif grade == "C":
  print("run!")
elif grade == "D":
  print("slowly~")
else:
  print("what?")
  
>>> A
>>> best!!!
```

### 6075 [기초-반복실행구조] 정수 1개 입력 받아 그 수까지 출력하기 1

정수(0 ~ 100) 1개를 입력받아 0부터 그 수까지 순서대로 출력해보자.

---

(풀이)

```python
n = int(input())

t = 0
while n >= 0:
  print(t)
  t += 1
  if t == n+1:
    break

>>> 4
>>> 0
>>> 1
>>> 2
>>> 3
>>> 4
```

### 6078 [기초-종합] 원하는 문자가 입력될 때까지 반복 출력하기

영문 소문자 'q'가 입력될 때까지 입력한 문자를 계속 출력하는 프로그램을 작성해보자.

---

(풀이)

```python
c = 0

while True:
    c = input()
    print(c)
    if c == "q":
        break
        
>>> x
>>> x
>>> q
>>> q
```

### 6079 [기초-종합] 언제까지 더해야 할까?

1, 2, 3 ... 을 계속 더해 나갈 때, 그 합이 입력한 정수(0 ~ 1000)보다 같거나 작을 때까지만 계속 더하는 프로그램을 작성해보자.

---

(풀이)

```python
n = int(input())

# 변수 초기화
i = 1
s = 0

# 반복문
while i <= 1000:
  s = s + i
  if s >= n:
    print(i)
    break
  i = i + 1

>>> 54
>>> 10
```

### 6081 [기초-종합] 16진수 구구단 출력하기

16진수(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)를 배운 영일이는 16진수끼리 곱하는 16진수 구구단?에 대해서 궁금해졌다.

A, B, C, D, E, F 중 하나가 입력될 때, 1부터 F까지 곱한 16진수 구구단의 내용을 출력해보자. (단, A ~ F 까지만 입력된다.)

---

(풀이)

```python
n = int(input(), 16)

for i in range(1, 16):
  print('%X'%n, '*%X'%i, '=%X'%(n*i), sep='')
  i = i+1
  
>>> B
>>> B*1=B
>>> B*2=16
>>> B*3=21
>>> B*4=2C
>>> B*5=37
>>> B*6=42
>>> B*7=4D
>>> B*8=58
>>> B*9=63
>>> B*A=6E
>>> B*B=79
>>> B*C=84
>>> B*D=8F
>>> B*E=9A
>>> B*F=A5
```

### 6084 [기초-종합] 소리 파일 저장용량 계산하기

소리가 컴퓨터에 저장될 때에는 디지털 데이터화 되어 저장된다.

마이크를 통해 1초에 적게는 수십 번, 많게는 수만 번 소리의 강약을 체크하고, 한 번씩 체크할 때 마다 그 값을 정수값으로 바꾸어 저장하는 방식으로 소리를 파일로 저장할 수 있다.

값을 저장할 때에는 비트를 사용하는 정도에 따라 세세한 녹음 정도를 결정할 수 있고, 좌우(스테레오) 채널로 저장하면 2배… 5.1채널이면 6배의 저장공간이 필요하고, 녹음 시간이 길면 그 만큼 더 많은 저장공간이 필요하다.

1초 동안 마이크로 소리강약을 체크하는 횟수를 h (헤르쯔, Hz 는 1초에 몇 번? 체크하는가를 의미한다.)

한 번 체크한 값을 저장할 때 사용하는 비트수를 b (2비트를 사용하면 0 또는 1 두 가지, 16비트를 사용하면 65536가지..)

좌우 등 소리를 저장할 트랙 개수인 채널 개수를 c (모노는 1개, 스테레오는 2개의 트랙으로 저장함을 의미한다.)

녹음할 시간(초) s가 주어질 때, 필요한 저장 용량을 계산하는 프로그램을 작성해보자.

실제로, 일반적인 CD 음질(44.1KHz, 16bit, 스테레오)로 1초 동안 저장하려면 44100 16 2 1 bit의 저장공간이 필요한데, 441001621/8/1024/1024 로 계산하면 약 0.168 MB 정도가 필요하다.

이렇게 녹음하는 방식을 PCM(Pulse Code Modulation) 방법이라고 하는데, 압축하지 않은 순수한(raw) 소리 데이터 파일은 대표적으로 `*.wav` 가 있다.

|bit(비트), byte(바이트) 계산|
|:--:|
|8 bit(비트) = 1byte(바이트) # 8bit=1Byte|
|1024 Byte ($$2^{10}$$ byte) = 1KB(킬로 바이트) # 1024Byte=1KB|
|1024 KB($$2^{10}$$ KB) = 1MB(메가 바이트)|
|1024 MB($$2^{10}$$ MB) = 1GB(기가 바이트)|
|1024 GB($$2^{10}$$ GB) = 1TB(테라 바이트)|


입력

h, b, c, s 가 공백을 두고 입력된다. h는 48,000이하, b는 32이하(단, 8의배수), c는 5이하, s는 6,000이하의 자연수이다.

출력

필요한 저장 공간을 MB 단위로 바꾸어 출력한다. 단, 소수점 첫째 자리까지의 정확도로 출력하고 MB를 공백을 두고 출력한다.

입력예시

44100 16 2 10

---

(풀이)

```python
w, x, y, z = input().split()

# 정수형으로 변환
h = int(w)
b = int(x)
c = int(y)
s = int(z)

# byte 단위의 메모리로 계산
memory_byte_unit = (h * b * c * s) / 8 # byte unit in bit

# 메모리 공간 계산
memory_space = memory_byte_unit / (1024 ** 2)

print(round(memory_space, 1), 'MB')

>>> 44100 16 2 10
>>> 1.7 MB
```

### 6085 [기초-종합] 그림 파일 저장용량 계산하기

이미지가 컴퓨터에 저장될 때에도 디지털 데이터화 되어 저장된다.

가장 기본적인 방법으로는 그림을 구성하는 한 점(pixel, 픽셀)의 색상을 빨강(r), 초록(g), 파랑(b)의 3가지의 빛의 세기 값으로 따로 변환하여 저장하는 것인데,

예를 들어 r, g, b 각 색에 대해서 8비트(0~255, 256가지 가능)씩을 사용한다고 하면,

한 점의 색상은 3가지 r, g, b의 8비트+8비트+8비트로 총 24비트로 표현해서 총 $$2^24$$ 가지의 서로 다른 빛의 색깔을 사용할 수 있는 것이다.

그렇게 저장하는 점을 모아 하나의 큰 이미지를 저장할 수 있게 되는데, $$1024 * 768$$ 사이즈에 각 점에 대해 24비트로 저장하면 그 이미지를 저장하기 위한 저장 용량을 계산할 수 있다.

이렇게 이미지의 원래(raw) 데이터를 압축하지 않고 그대로 저장하는 대표적인 이미지 파일이 *.bmp 파일이며, 비트로 그림을 구성한다고 하여 비트맵 방식 또는 래스터 방식이라고 한다.

이미지의 가로 해상도 w, 세로 해상도 h, 한 픽셀을 저장하기 위한 비트 b 가 주어질 때, 압축하지 않고 저장하기 위해 필요한 저장 용량을 계산하는 프로그램을 작성해 보자.

예를 들어 일반적인 $$1024 * 768$$ 사이즈(해상도)의 각점에 대해 24비트(rgb 각각 8비트씩 3개)로 저장하려면  bit의 저장공간이 필요한데,  / 8 / 1024 / 1024 로 계산하면 약 2.25 MB 정도가 필요하다.

실제 그런지 확인하고 싶다면, 간단한 그림 편집/수정 프로그램을 통해 확인할 수 있다.

---

(풀이)

```python
x, y, z = input().split()

# 정수형으로 변환
pixel_width = int(x)
pixel_height = int(y)
bit = int(z)

# byte 단위의 해상도
resol_byte_unit = (pixel_width * pixel_height * bit) / 8 # byte unit in bit

# 이미지 공간 계산
image_space = resol_byte_unit / (1024 ** 2)

print("{:.2f}".format(image_space), 'MB')
# 주의! print(round(image_space, 2), 'MB')로 하면, 0.00MB로 표기되지 않고 0.0MB로 표기되는 문제가 발생한다.

>>> 100 100 4
>>> 0.00 MB
```

### 6088 [기초-종합] 수 나열하기1

어떤 규칙에 따라 수를 순서대로 나열한 것을 수열(sequences)이라고 한다.

예를 들어 1 4 7 10 13 16 19 22 25 ... 은 1부터 시작해 이전에 만든 수에 3을 더해 다음 수를 만든 수열이다. 이러한 것을 수학에서는 앞뒤 수들의 차이가 같다고 하여

등차(차이가 같다의 한문 말) 수열이라고 한다. (등차수열 : arithmetic progression/sequence) 수열을 알게 된 영일이는 갑자기 궁금해졌다.

"그럼.... 123번째 나오는 수는 뭘까?"

영일이는 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

시작 값(a), 등차(d), 몇 번째인지를 나타내는 정수(n)가 입력될 때 n번째 수를 출력하는 프로그램을 만들어보자.

---

(풀이)

```python
x, y, z = input().split()

a = int(x)
d = int(y)
n = int(z)

i = 1
while True:
  a += d
  i += 1
  if i == n:
    print(a)
    break
    
>>> 1 3 5
>>> 13
```

### 6089 [기초-종합] 수 나열하기2

어떤 규칙에 따라 수를 순서대로 나열한 것을 수열(sequences)이라고 한다.

예를 들어 2 6 18 54 162 486 ... 은 2부터 시작해 이전에 만든 수에 3을 곱해 다음 수를 만든 수열이다.

이러한 것을 수학에서는 앞뒤 수들의 비율이 같다고 하여 등비(비율이 같다의 한문 말) 수열이라고 한다. (등비수열 : geometric progression/sequence)

등비 수열을 알게된 영일이는 갑자기 궁금해졌다. "그럼.... 13번째 나오는 수는 뭘까?" 영일이는 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

시작 값(a), 등비(r), 몇 번째인지를 나타내는 정수(n)가 입력될 때 n번째 수를 출력하는 프로그램을 만들어보자.

---

(풀이)

```python
x, y, z = input().split()

# 정수형으로 변환
a = int(x)
r = int(y)
n = int(z)

# 변수 초기화
i = 1
# 반복문
while True:
  a = a * r
  i += 1
  if i == n:
    print(a)
    break
    
>>> 2 3 7
>>> 1458
```

### 6090 [기초-종합] 수 나열하기3

어떤 규칙에 따라 수를 순서대로 나열한 것을 수열(sequences)이라고 한다.

예를 들어 1 -1 3 -5 11 -21 43 ... 은 1부터 시작해 이전에 만든 수에 -2를 곱한 다음 1을 더해 다음 수를 만든 수열이다.

이런 이상한 수열을 알게 된 영일이는 또 궁금해졌다. "그럼.... 13번째 나오는 수는 뭘까?"

영일이는 물론 수학을 아주 잘하지만 이런 문제는 본 적이 거의 없었다... 그래서 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

시작 값(a), 곱할 값(m), 더할 값(d), 몇 번째인지를 나타내는 정수(n)가 입력될 때, n번째 수를 출력하는 프로그램을 만들어보자.

---

(풀이)

```python
w, x, y, z = input().split()

# 정수형 변환
a = int(w)
m = int(x)
d = int(y)
n = int(z)

# 변수 초기화
i = 1
# 반복문
while True:
  if i == n:
    print(a)
    break
  a = a * m + d
  i += 1
  
>>> 1 -2 1 1
>>> 1
```

### 6091 [기초-종합] 함께 문제 푸는 날(최소공배수 문제)

온라인 채점시스템에는 초등학생, 중고등학생, 대학생, 대학원생, 일반인, 군인, 프로그래머, 탑코더 등 아주 많은 사람들이 들어와 문제를 풀고 있는데,

실시간 채점 정보는 메뉴의 채점기록(Judge Status)을 통해 살펴볼 수 있다.

자! 여기서...잠깐.. 같은 날 동시에 가입한 3명의 사람들이 온라인 채점시스템에 들어와 문제를 푸는 날짜가 매우 규칙적이라고 할 때, 다시 모두 함께 문제를 풀게 되는 그날은 언제일까?

예를 들어 3명이 같은 날 가입/등업하고, 각각 3일마다, 7일마다, 9일마다 한 번씩 들어온다면, 처음 가입하고 63일 만에 다시 3명이 함께 문제를 풀게 된다.

갑자기 힌트? 왠지 어려워 보이지 않는가? 수학에서 배운 최소공배수를 생각한 사람들도 있을 것이다. 하지만, 정보에서 배우고 경험하는 정보과학의 세상은 때때로 컴퓨터의 힘을 빌려 간단한 방법으로 해결할 수 있게 한다.

아래의 코드를 읽고 이해한 후 도전해 보자. day는 날 수, a/b/c는 방문 주기이다.

```python
- (중략) -
d = 1
while d%a!=0 or d%b!=0 or d%c!=0 :
  d += 1

print(d)
```

물론, 아주 많은 다양한 방법이 있을 수 있다.

---

(풀이)

```python
x, y, z = input().split()

# 정수형 변환
period1= int(x)
period2 = int(y)
period3 = int(z)

# 변수 초기화
day = 1
# 반복문
while day % period1 != 0 or day % period2 != 0 or day % period3 != 0:
  day += 1

print(day)

# 3일/7일/9일 주기로 방문하는 사람들이 모두 한 날짜에 만나는 날을 계산하는 문제는 최소공배수 문제로 귀결하여 볼 수 있다.
# 하지만 해당 문제를 최소공배수로 풀기에는 어려움이 있다.(모든 서로소들을 고려해야하기 때문이다.)
# 따라서 위와 같이 날짜를 나누었을 때 모두 나머지가 0인 경우를 찾는 것이 가장 쉬운 방법이다.

>>> 3 7 9
>>> 63
```

### 6093 [기초-리스트] 이상한 출석 번호 부르기2

정보 선생님은 수업을 시작하기 전에 이상한 출석을 부른다.

학생들의 얼굴과 이름을 빨리 익히기 위해 번호를 무작위(랜덤)으로 부르는데, 영일이는 선생님이 부른 번호들을 기억하고 있다가 거꾸로 불러보는 것을 해보고 싶어졌다.

출석 번호를 n번 무작위로 불렀을 때, 부른 번호를 거꾸로 출력해 보자.

예시

```python
...
for i in range(n-1, -1, -1) :
  print(a[i], end=' ')
...
```

참고

번호를 부른 순서를 리스트에 순서대로 기록해 두었다가, 기록한 값들을 거꾸로 출력하면 된다. range(시작, 끝, 증감) #시작 수는 포함, 끝 수는 포함하지 않음. [시작, 끝) range(n-1, -1, -1) #n-1, n-2, ..., 3, 2, 1, 0

---

(풀이)

```python
n = int(input()) # 출석 번호
a = input().split() # 공백을 기준으로 잘라 a에 순서대로 저장

for i in range(n):
  a[i] = int(a[i]) # a에 저장되어 있는 각 값을 정수로 변환하여 다시 저장

for i in range(n-1, -1, -1):
  print(a[i], end=' ') # a에 저장된 값들을 역순으로 뽑아내기
  
>>> 10
>>> 10 4 2 3 6 6 7 9 8 5
>>> 5 8 9 7 6 6 3 2 4 10 
```

### 6094 [기초-리스트] 이상한 출석 번호 부르기3

정보 선생님은 오늘도 이상한 출석을 부른다.

영일이는 오늘도 다른 생각을 해보았다. 출석 번호를 다 부르지는 않은 것 같은데... 가장 빠른 번호가 뭐였지?

출석 번호를 n번 무작위로 불렀을 때, 가장 빠른 번호를 출력해 보자.

단, 첫 번째 번호와 마지막 번호가 몇 번인지는 아무도 모른다. 음수(-) 번호, 0번 번호도 있을 수 있다.

참고

리스트에 출석 번호를 기록해 두었다가, 그 중에서 가장 작은 값을 찾아내면 된다. 그런데, 가장 작은 값은 어떻게 어떤 것과 비교하고, 어떻게 찾아야 할까?

---

(풀이)

```python
n = int(input()) # 출석 번호
a = input().split() # 공백을 기준으로 잘라 a에 순서대로 저장

for i in range(n):
  a[i] = int(a[i]) # a에 저장되어 있는 각 값을 정수로 변환하여 다시 저장

print(min(a)) # a에 저장된 값들 중 최소값 뽑아내기

>>> 10
>>> 10 4 2 3 6 6 7 9 8 5
>>> 2
```

### 6096 [기초-리스트] 바둑알 십자 뒤집기

부모님을 기다리던 영일이는 검정/흰 색 바둑알을 바둑판에 꽉 채워 깔아 놓고 놀다가...

"십(+)자 뒤집기를 해볼까?"하고 생각했다.

십자 뒤집기는 그 위치에 있는 모든 가로줄 돌의 색을 반대(1->0, 0->1)로 바꾼 후, 다시 그 위치에 있는 모든 세로줄 돌의 색을 반대로 바꾸는 것이다. 어떤 위치를 골라 집자 뒤집기를 하면, 그 위치를 제외한 가로줄과 세로줄의 색이 모두 반대로 바뀐다.

바둑판(19 * 19)에 흰 돌(1) 또는 검정 돌(0)이 모두 꽉 채워져 놓여있을 때, n개의 좌표를 입력받아 십(+)자 뒤집기한 결과를 출력하는 프로그램을 작성해보자.

예시

```python
...
for i in range(n) :
  x,y=input().split()
  for j in range(1, 20) :
    if d[j][int(y)]==0 :
      d[j][int(y)]=1
    else :
      d[j][int(y)]=0

    if d[int(x)][j]==0 :
      d[int(x)][j]=1
    else :
      d[int(x)][j]=0
...
```

참고

리스트가 들어있는 리스트를 만들면? 가로번호, 세로번호를 사용해 2차원 형태의 데이터처럼 쉽게 기록하고 사용할 수 있다. 리스트이름[번호][번호] 형식으로 저장되어있는 값을 읽고 쓸 수 있다.

---

(풀이)

```python
d = []  # 대괄호 [ ] 를 이용해 아무것도 없는 빈 리스트 만들기
for i in range(20):
  d.append([])  # 리스트 안에 다른 리스트 추가해 넣기
  for j in range(20): 
    d[i].append(0)  # 리스트 안에 들어있는 리스트에 0을 집어 넣기

for i in range(1, 20): # 입력의 순서를 총 19번 반복하게 만들기
  status = input().split() # 입력 값에 대해 공백을 기준으로 잘라 status에 순서대로 저장
  for j in range(0, 19):
    if int(status[j]) == 1: # 입력된 status 중 그 값이 1인 경우
      d[i][j+1] = 1 # 해당 element에 0 대신 1을 집어 넣는다.

n = int(input())
for i in range(n):
  x, y = input().split()
  
  for j in range(1, 20):
    if d[j][int(y)] == 0:
      d[j][int(y)] = 1
    else:
      d[j][int(y)] = 0
      
    if d[int(x)][j] == 0:
      d[int(x)][j] = 1
    else:
      d[int(x)][j] = 0

for i in range(1, 20):
  for j in range(1, 20): 
    print(d[i][j], end=' ') # 공백을 두고 한 줄로 출력
  print() # 줄 바꿈
  
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0
>>> 2
>>> 10 10
>>> 12 12

0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
```

### 6097 [기초-리스트] 설탕과자 뽑기

부모님과 함께 놀러간 영일이는 설탕과자(설탕을 녹여 물고기 등의 모양을 만든 것) 뽑기를 보게 되었다.

길이가 다른 몇 개의 막대를 바둑판과 같은 격자판에 놓는데,

막대에 있는 설탕과자 이름 아래에 있는 번호를 뽑으면 설탕과자를 가져가는 게임이었다. (잉어, 붕어, 용 등 여러 가지가 적혀있다.)

격자판의 세로(h), 가로(w), 막대의 개수(n), 각 막대의 길이(l), 막대를 놓는 방향(d:가로는 0, 세로는 1)과 막대를 놓는 막대의 가장 왼쪽 또는 위쪽의 위치(x, y)가 주어질 때,

격자판을 채운 막대의 모양을 출력하는 프로그램을 만들어보자.

---

(풀이)

```python
h, w = input("height, width: ").split()

board = [] # 대괄호 [ ] 를 이용해 아무것도 없는 빈 리스트 만들기
for i in range(int(h)+1):
  board.append([]) # 리스트 안에 다른 리스트 추가해 넣기
  for j in range(int(w)+1):
    board[i].append(0) # 리스트 안에 들어있는 리스트에 0을 집어 넣기

n = int(input("number of bar: "))
for i in range(n):
  l, d, x, y = input("length, direction, coord: ").split() 
  # 여기서 x축은 세로방향, y축은 가로방향임에 주의하시오!
  for j in range(1, int(h)+1):
    if int(d) == 0: # 가로방향
      for k in range(0, int(l)): # 길이만큼 주어진 위치에서 가로로 확장
        board[int(x)][int(y)+k] = 1
    elif int(d) == 1: # 세로방향
      for k in range(0, int(l)): # 길이만큼 주어진 위치에서 세로로 확장
        board[int(x)+k][int(y)] = 1

for i in range(1, int(h)+1):
  for j in range(1, int(w)+1): 
    print(board[i][j], end=' ') # 공백을 두고 한 줄로 출력
  print() # 줄 바꿈
  
>>> height, width: 5 5
>>> number of bar: 3
>>> length, direction, coord: 2 0 1 1
>>> length, direction, coord: 3 1 2 3
>>> length, direction, coord: 4 1 2 5

1 1 0 0 0 
0 0 1 0 1 
0 0 1 0 1 
0 0 1 0 1 
0 0 0 0 1 
```

### 6098 [기초-리스트] 성실한 개미

영일이는 생명과학에 관심이 생겨 왕개미를 연구하고 있었다.

왕개미를 유심히 살펴보던 중 특별히 성실해 보이는 개미가 있었는데, 그 개미는 개미굴에서 나와 먹이까지 가장 빠른 길로 이동하는 것이었다.

개미는 오른쪽으로 움직이다가 벽을 만나면 아래쪽으로 움직여 가장 빠른 길로 움직였다. (오른쪽에 길이 나타나면 다시 오른쪽으로 움직인다.)

이에 호기심이 생긴 영일이는 그 개미를 미로 상자에 넣고 살펴보기 시작하였다.

미로 상자에 넣은 개미는 먹이를 찾았거나, 더 이상 움직일 수 없을 때까지 오른쪽 또는 아래쪽으로만 움직였다.

미로 상자의 구조가 0(갈 수 있는 곳), 1(벽 또는 장애물)로 주어지고, 먹이가 2로 주어질 때, 성실한 개미의 이동 경로를 예상해보자.

단, 맨 아래의 가장 오른쪽에 도착한 경우, 더 이상 움직일 수 없는 경우, 먹이를 찾은 경우에는 더이상 이동하지 않고 그 곳에 머무른다고 가정한다.

미로 상자의 테두리는 모두 벽으로 되어 있으며, 개미집은 반드시 (2, 2)에 존재하기 때문에 개미는 (2, 2)에서 출발한다.

---

(풀이1)
: for문을 이용하여 Case 하나에 대해서만 풀 수 있는 방법입니다. 이 방법은 개미가 먹이를 만나서 종료되는 것이 아닌 개미가 이동 가능한 칸 수를 제한하여 얻어지는 결과입니다.
따라서, 일반적인 해가 될 수 없습니다. 그러므로 (풀이1)을 정답으로 제출하면 틀리게 됩니다. 그럼에도 불구하고 제가 해당 틀린 풀이를 기재한 이유는 while문으로 풀려다가 너무 안풀려서 시도한 방법이기 때문입니다.
해당 for문을 통해 문제 풀이의 intuition을 얻고, while문으로 변경하여 문제를 풀었기 때문에 idea를 드리고자 틀린 풀이임에도 불구하고 올립니다.

```python

@ 미로 상자 만들기
board = [] # 대괄호 [ ] 를 이용해 아무것도 없는 빈 리스트 만들기
for i in range(11):
  board.append([]) # 리스트 안에 다른 리스트 추가해 넣기
  for j in range(11): 
    board[i].append(0) # 리스트 안에 들어있는 리스트에 0을 집어 넣기

for i in range(1, 11): # 입력의 순서를 총 10번 반복하게 만들기
  condition = input().split() # 입력 값에 대해 공백을 기준으로 잘라 condition에 순서대로 저장
  for j in range(0, 10):
    if int(condition[j]) == 1: # 입력된 condition 중 그 값이 1인 경우
      board[i][j+1] = 1 # 해당 element에 0 대신 1을 집어 넣는다.
    elif int(condition[j]) == 2: # 입력된 condtion 중 그 값이 2인 경우
      board[i][j+1] = 2 # 해당 element에 0 대신 2를 집어 넣는다.

@ 개미 이동 경로 설정
pos_x = 2 # 출발지점 지정 (x축은 세로방향, y축은 가로방향임에 주의!)
pos_y = 2
board[pos_x][pos_y] = 9 # (2,2)에 9를 넣어줌(시작지점 표시)

for move in range(10): # 총 10번의 움직임을 발생시키기 위해 반복시킴
  if board[pos_x][pos_y + 1] == 0: # 오른쪽이 0이면 
    pos_y += 1 # 오른쪽으로 좌표를 한 칸 이동시킴
    board[pos_x][pos_y] = 9 # 오른쪽으로 이동한 좌표에 9를 집어 넣음
  elif board[pos_x][pos_y + 1] == 1: # 오른쪽이 1이면
    pos_x += 1 # 아래쪽으로 좌표를 한 칸 이동시킴
    board[pos_x][pos_y] = 9 # 아래쪽으로 이동한 좌표에 9를 집어 넣음
  elif board[pos_x + 1][pos_y] == 2: # 아래쪽이 2면
    pos_x += 1 # 아래로 한 칸 이동한 뒤
    board[pos_x][pos_y] = 9 # 아래쪽으로 이동한 좌표에 9를 집어 넣음

@ 개미의 이동 경로 출력
for i in range(1, 11):
  for j in range(1, 11): 
    print(board[i][j], end=' ') # 공백을 두고 한 줄로 출력
  print() # 줄 바꿈
  
>>> 1 1 1 1 1 1 1 1 1 1
>>> 1 0 0 1 0 0 0 0 0 1
>>> 1 0 0 1 1 1 0 0 0 1
>>> 1 0 0 0 0 0 0 1 0 1
>>> 1 0 0 0 0 0 0 1 0 1
>>> 1 0 0 0 0 1 0 1 0 1
>>> 1 0 0 0 0 1 2 1 0 1
>>> 1 0 0 0 0 1 0 0 0 1
>>> 1 0 0 0 0 0 0 0 0 1
>>> 1 1 1 1 1 1 1 1 1 1

1 1 1 1 1 1 1 1 1 1 
1 9 9 1 0 0 0 0 0 1 
1 0 9 1 1 1 0 0 0 1 
1 0 9 9 9 9 9 1 0 1 
1 0 0 0 0 0 9 1 0 1 
1 0 0 0 0 1 9 1 0 1 
1 0 0 0 0 1 9 1 0 1 
1 0 0 0 0 1 0 0 0 1 
1 0 0 0 0 0 0 0 0 1 
1 1 1 1 1 1 1 1 1 1 
```

(풀이2)
: (풀이2)는 문제의 모든 test case를 통과한 풀이입니다. 

(힌트:  여기서 주의 깊게 살펴야할 점은 다음과 같습니다.

  + 개미는 오른쪽, 아래쪽으로만 이동이 가능하다.
  + 개미는 오른쪽, 아래쪽으로 둘 다 이동이 가능한 경우에는 오른쪽으로만 이동한다.

위 두 특징을 이용하여 문제를 풀 수 있습니다.)

```python
@ 미로 상자 만들기
board = [] # 대괄호 [ ] 를 이용해 아무것도 없는 빈 리스트 만들기
for i in range(11):
  board.append([]) # 리스트 안에 다른 리스트 추가해 넣기
  for j in range(11): 
    board[i].append(0) # 리스트 안에 들어있는 리스트에 0을 집어 넣기

for i in range(1, 11): # 입력의 순서를 총 10번 반복하게 만들기
  condition = input().split() # 입력 값에 대해 공백을 기준으로 잘라 condition에 순서대로 저장
  for j in range(0, 10):
    if int(condition[j]) == 1: # 입력된 condition 중 그 값이 1인 경우
      board[i][j+1] = 1 # 해당 element에 0 대신 1을 집어 넣는다.
    elif int(condition[j]) == 2: # 입력된 condtion 중 그 값이 2인 경우
      board[i][j+1] = 2 # 해당 element에 0 대신 2를 집어 넣는다.

@ 개미 이동 경로 설정 
pos_x = 2 # 출발지점 지정 (x축은 세로방향, y축은 가로방향임에 주의!)
pos_y = 2
board[pos_x][pos_y] = 9 # (2,2)에 9를 넣어줌

while pos_x <= 9 and pos_y <= 10: # 반복문의 조건을 제한하여 개미가 벽을 뚫지 않도록 한다.
  pos_y += 1 # 개미는 우측이동을 default로 가진다. 따라서 우측으로 한 칸 추가! 
  
  if board[pos_x][pos_y] == 0: # 만일 우측 한 칸의 값이 0이면
    board[pos_x][pos_y] = 9 # 우측으로 한 칸 이동한 좌표에 9를 집어 넣음
    continue # pos_y += 1로 돌아감(우측으로 한 칸 추가!)
    
  elif board[pos_x][pos_y] == 1: # 만일 우측 한 칸의 값이 1이면
    pos_x += 1 # 아래쪽으로 한 칸 이동
    pos_y -= 1 # 왼쪽으로 한 칸 이동
    if board[pos_x][pos_y] == 0: # 만일 바로 아래 값이 0이면
      board[pos_x][pos_y] = 9 # 해당 위치에 9를 넣음
      continue # pos_y += 1로 돌아감(우측으로 한 칸 추가!)
    elif board[pos_x][pos_y] == 1: # 만일 바로 아래 값이 1(상자의 마지막 벽임 왜냐하면 개미는 위, 왼쪽으로 움직이지 못하기 때문이다.)이면
      break # 루프 빠져나가기
    else: # 바로 아래 값이 0과 1이 아닌 값 (2)이면
      board[pos_x][pos_y] = 9 # 아래쪽으로 이동한 좌표에 9를 집어 넣음
      break # 루프 빠져나가기
      
  elif board[pos_x][pos_y] == 2: # 만일 오른쪽이 2이면
    board[pos_x][pos_y] = 9 # 해당 위치에 9 넣고
    break # 루프 빠져나가기
    
@ 개미의 이동 경로 출력
for i in range(1, 11):
  for j in range(1, 11): 
    print(board[i][j], end=' ') # 공백을 두고 한 줄로 출력
  print() # 줄 바꿈
  
>>> 1 1 1 1 1 1 1 1 1 1
>>> 1 0 0 1 0 0 0 0 0 1
>>> 1 0 0 1 1 1 0 0 0 1
>>> 1 0 0 0 0 0 0 1 0 1
>>> 1 0 0 0 0 0 0 1 0 1
>>> 1 0 0 0 0 1 0 1 0 1
>>> 1 0 0 0 0 1 2 1 0 1
>>> 1 0 0 0 0 1 0 0 0 1
>>> 1 0 0 0 0 0 0 0 0 1
>>> 1 1 1 1 1 1 1 1 1 1

1 1 1 1 1 1 1 1 1 1 
1 9 9 1 0 0 0 0 0 1 
1 0 9 1 1 1 0 0 0 1 
1 0 9 9 9 9 9 1 0 1 
1 0 0 0 0 0 9 1 0 1 
1 0 0 0 0 1 9 1 0 1 
1 0 0 0 0 1 9 1 0 1 
1 0 0 0 0 1 0 0 0 1 
1 0 0 0 0 0 0 0 0 1 
1 1 1 1 1 1 1 1 1 1 
```
