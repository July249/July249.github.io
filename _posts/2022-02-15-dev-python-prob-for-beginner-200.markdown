---
layout: post
title: "[초보자를 위한 파이썬 300제] 131~200"
subtitle:
categories: dev
tags: dev python beginner
comments: true
published: true
---

## 131~200
---

### 131. for 문의 실행결과를 예측하라.

```python
과일 = ["사과", "귤", "수박"]
for 변수 in 과일:
  print(변수)
```

---


예측 결과

: 리스트에 들어있는 문자열이 한 라인에 하나씩 출력됩니다.

```python
사과
귤
수박
```

### 132. for문의 실행결과를 예측하라.

```python
과일 = ["사과", "귤", "수박"]
for 변수 in 과일:
  print("#####")
```

---


예측 결과

리스트에 들어있는 문자의 갯수만큼 "#####" 이 출력된다.
즉, 총 3번 "######" 이 한 라인에 한번씩 출력된다.

```python
>>> #####
>>> #####
>>> #####
```

### 133. 다음 for문과 동일한 기능을 수행하는 코드를 작성하세요.

```python
for 변수 in ["A", "B", "C"]:
  print(변수)
```

---



```python
변수 = "A"
print(변수)
변수 = "B"
print(변수)
변수 = "C"
print(변수)

>>> A
>>> B
>>> C
```

### 134. for문을 풀어서 동일한 동작을 하는 코드를 작성하시오.

```python
for 변수 in ["A", "B", "C"]:
  print("출력:", 변수)
```

---


```python
print("출력:", "A")
print("출력:", "B")
print("출력:", "C")

>>> 출력: A
>>> 출력: B
>>> 출력: C
```

### 135. for문을 풀어서 동일한 동작을 하는 코드를 작성하라.

```python
for 변수 in ["A", "B", "C"]:
  b = 변수.lower()
  print("변환:", b)
```

---


```python
print("변환:", "a")
print("변환:", "b")
print("변환:", "c")

>>> 변환: a
>>> 변환: b
>>> 변환: c
```

### 136. 다음 코드를 for문으로 작성하라.

```python
변수 = 10
print(변수)
변수 = 20
print(변수)
변수 = 30
print(변수)
```

---


```python
for 변수 in [10, 20, 30]:
  print(변수)

>>> 10
>>> 20
>>> 30
```

### 137. 다음 코드를 for문으로 작성하라.

```python
print(10)
print(20)
print(30)
```

---


```python
for i in [10, 20, 30]:
  print(i)
  
>>> 10
>>> 20
>>> 30
```

### 138. 다음 코드를 for문으로 작성하라.

```python
print(10)
print("-------")
print(20)
print("-------")
print(30)
print("-------")
```

---


```python
for i in [10, 20, 30]:
  print(i)
  print("---------")
  
>>> 10
>>> ---------
>>> 20
>>> ---------
>>> 30
>>> ---------
```

### 139. 다음 코드를 for문으로 작성하라.

```python
print("++++")
print(10)
print(20)
print(30)
```

---


```python
print("++++")
for i in [10, 20, 30]:
  print(i)
  
>>> ++++
>>> 10
>>> 20
>>> 30
```

### 140. 다음 코드를 for문으로 작성하라.

```python
print("-------")
print("-------")
print("-------")
print("-------")
```

---


```python
for i in [1,2,3,4]:
  print("--------")
  
>>> --------
>>> --------
>>> --------
>>> --------
```

### 141. 다음과 같이 판매가가 저장된 리스트가 있을 때 부가세가 포함된 가격을 for문을 사용해서 화면에 출력하라. 단 부가세는 10원으로 가정한다.

```python
리스트 = [100, 200, 300]
110
210
310
```

---


```python
for i in [100, 200, 300]:
  print(i + 10)
  
>>> 110
>>> 210
>>> 310
```

### 142. for문을 사용해서 리스트에 저장된 값을 다음과 같이 출력하라.

```python
리스트 = ["김밥", "라면", "튀김"]
오늘의 메뉴: 김밥
오늘의 메뉴: 라면
오늘의 메뉴: 튀김
```

---


```python
for i in ["김밥", "라면", "튀김"]:
  print("오늘의 메뉴: ", i)
  
>>> 오늘의 메뉴:  김밥
>>> 오늘의 메뉴:  라면
>>> 오늘의 메뉴:  튀김
```

### 143. 리스트에 주식 종목이름이 저장되어 있다.

```python
리스트 = ["SK하이닉스", "삼성전자", "LG전자"]
```

저장된 문자열이 길이를 다음과 같이 출력하라.

```python
6
4
4
```

---


```python
for i in ["SK하이닉스", "삼성전자", "LG전자"]:
  print(len(i))

>>> 6
>>> 4
>>> 4
```

### 144. 리스트에는 동물이름이 문자열로 저장되어 있다.

```python
리스트 = ['dog', 'cat', 'parrot']
```

동물 이름과 글자수를 다음과 같이 출력하라.

```python
dog 3
cat 3
parrot 6
```

---


```python
for i in ['dog', 'cat', 'parrot']:
  print(i, len(i))

>>> dog 3
>>> cat 3
>>> parrot 6
```

### 145. 리스트에 동물 이름이 저장되어있다.

```python
리스트 = ['dog', 'cat', 'parrot']
```

for문을 사용해서 동물 이름의 첫 글자만 출력하라.

```python
d
c
p
```

---


```python
for i in ['dog', 'cat', 'parrot']:
  print(i[0])

>>> d
>>> c
>>> p
```

### 146. 리스트에는 세 개의 숫자가 바인딩돼 있다.

```python
리스트 = [1, 2, 3]
```

for문을 사용해서 다음과 같이 출력하라.

```python
3 x 1
3 x 2
3 x 3
```

---


```python
for i in [1, 2, 3]:
  print("3 x", i)

>>> 3 x 1
>>> 3 x 2
>>> 3 x 3
```

### 147. 리스트에는 세 개의 숫자가 바인딩돼 있다.

```python
리스트 = [1, 2, 3]
```

for문을 사용해서 다음과 같이 출력하라.

```python
3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
```

---


```python
for i in [1, 2, 3]:
  print("3 x", i, "=", 3*i)

>>> 3 x 1 = 3
>>> 3 x 2 = 6
>>> 3 x 3 = 9
```

### 148. 리스트에는 네 개의 문자열이 바인딩돼 있다.

```python
리스트 = ["가", "나", "다", "라"]
```

for문을 사용해서 다음과 같이 출력하라.

```python
나
다
라
```

---


```python
lst = ["가", "나", "다", "라"]
for i in lst[1:]:
  print(i)
  
>>> 나
>>> 다
>>> 라
```

### 149. 리스트에는 네 개의 문자열이 바인딩돼 있다.

```python
리스트 = ["가", "나", "다", "라"]
```

for문을 사용해서 다음과 같이 출력하라.

```python
가
다
```

---


```python
# My solution
"""
lst = ["가", "나", "다", "라"]
for i in range(len(lst)):
  if i % 2 == 0:
    print(lst[i])
"""
# Solution
lst = ["가", "나", "다", "라"]
for i in lst[::2]:
  print(i)

>>> 가
>>> 다
```

### 150. 리스트에는 네 개의 문자열이 바인딩돼 있다.

```python
리스트 = ["가", "나", "다", "라"]
```

for문을 사용해서 다음과 같이 출력하라.

```python
라
다
나
가
```

---


```python
lst = ["가", "나", "다", "라"]
lst.reverse()
for i in lst:
  print(i)

>>> 라
>>> 다
>>> 나
>>> 가
```

### 151. 리스트에는 네 개의 정수가 저장돼 있다.

```python
리스트 = [3, -20, -3, 44]
```

for문을 사용해서 리스트의 음수를 출력하라.

```python
-20
-3
```

---


```python
lst = [3, -20, -3, 44]
for i in lst:
  if i < 0:
    print(i)
    
>>> -20
>>> -3
```

### 152. for문을 사용해서 3의 배수만을 출력하라.

```python
리스트 = [3, 100, 23, 44]

>>> 3
```

---


```python
lst = [3, 100, 23, 44]
for i in lst:
  if i % 3 == 0:
    print(i)
>>> 3
```

### 153. 리스트에서 20 보다 작은 3의 배수를 출력하라

```python
리스트 = [13, 21, 12, 14, 30, 18]
```

```python
12
18
```

---


```python
lst = [13, 21, 12, 14, 30, 18]
for i in lst:
  if (i < 20) & (i % 3 == 0):
    print(i)
    
>>> 12
>>> 18
```

### 154. 리스트에서 세 글자 이상의 문자를 화면에 출력하라

```python
리스트 = ["I", "study", "python", "language", "!"]
```

```python
study
python
language
```

---


```python
lst = ["I", "study", "python", "language", "!"]
for i in lst:
  if len(i) >= 3:
    print(i)

>>> study
>>> python
>>> language
```

### 155. 리스트에서 대문자만 화면에 출력하라.

```python
리스트 = ["A", "b", "c", "D"]
```

```python
A
D
```

(참고) isupper() 메서드는 대문자 여부를 판별합니다.

```python
변수 = "A"
변수.isupper()

>>> True
```

```python
변수 = "a"
변수.isupper()

>>> False
```

---


```python
lst = ["A", "b", "c", "D"]
for i in lst:
  if i.isupper() == True:
    print(i)
    
>>> A
>>> D
```

### 156. 리스트에서 소문자만 화면에 출력하시오.

```python
list = ['A', 'b', 'c', 'D']
```

```python
b
c
```

---

```python
lst = ['A', 'b', 'c', 'D']
for alphabet in lst:
  if alphabet.islower() == True:
    print(alphabet)
    
>>> b
>>> c
```

### 157. 이름의 첫 글자를 대문자로 변경해서 출력하라.

```python
list = ['dog', 'cat', 'parrot']
```

```python
Dog
Cat
Parrot
```

(cf) upper() method는 문자열을 대문자로 변경합니다.

```python
변수 = "a"
a.upper()

>>> A
```

```python
변수 = "abc"
변수.upper()

>>> ABC
```

---


```python
# 리스트에 저장된 str 구간을 나누어 첫글자는 대문자로 변경, 나머지는 그대로 출력하게 만드는 방법
lst = ['dog', 'cat', 'parrot']
for word in lst:
  print(word[0].upper() + word[1:])

>>> Dog
>>> Cat
>>> Parrot
```

```python
# .title() 연산자를 이용한 방법
lst = ['dog', 'cat', 'parrot']
for word in lst:
  word = word.title() # list에 있는 문자열을 .title()로 단어의 첫글자만 대문자로 바꾸는 연산자를 적용한 뒤, 다시 word로 반환
  print(word)

>>> Dog
>>> Cat
>>> Parrot
```

```python
# Solution
"""
지금까지 배웠던 내용을 모두 응용해야 하는 문제입니다. 첫 번째 단어만 대문자로 변경해야하기 때문에 아래의 순서로 처리해야 합니다.
(1) 인덱싱으로 첫번째 문자를 가져온다.
(2) .upper() 함수로 대문자로 변경한다.
(3) 변경한 대문자와 나머지 문자를 이어붙인다.
정리한 내용을 코드로 작성하면 다음과 같습니다.
"""

리스트 = ['dog', 'cat', 'parrot']
for 변수 in 리스트:
  첫글자 = 변수[0]              # (1)
  대문자 = 첫글자.upper()       # (2)
  print(대문자 + 변수[1:])      # (3)
  
"""
간단하기 때문에 한줄에 코드를 작성해도 좋습니다.
"""

"""
for 변수 in 리스트:
  print(변수[0].upper() + 변수[1:])
"""

>>> Dog
>>> Cat
>>> Parrot
```

### 158. 파일 이름이 저장된 리스트에서 확장자를 제거하고 파일 이름만 화면에 출력하라. (힌트: split() 메서드)

```python
list = ['hello.py', 'ex01.py', 'intro.hwp']
```

```python
hello
ex01
intro
```

---


```python
lst = ['hello.py', 'ex01.py', 'intro.hwp']
for exe in lst:
  exe = exe.split(".")
  print(exe[0])
  
>>> hello
>>> ex01
>>> intro
```

### 159. 파일 이름이 저장된 리스트에서 확장자가 .h인 파일 이름을 출력하라.

```python
list = ['intra.h', 'intra.c', 'define.h', 'run.py']
```

```python
intra.h
define.h
```

---


```python
lst = ['intra.h', 'intra.c', 'define.h', 'run.py']
for exe in lst:
  splitted_exe = exe.split(".")
  if splitted_exe[1] == "h":
    print(exe)
    
>>> intra.h
>>> define.h
```

### 160. 파일 이름이 저장된 리스트에서 확장자가 .h나 .c인 파일을 화면에 출력하시오.

```python
list = ['intra.h', 'intra.c', 'define.h', 'run.py']
```

```python
intra.h
intra.c
define.h
```

---


```python
lst = ['intra.h', 'intra.c', 'define.h', 'run.py']
for exe in lst:
  splitted_exe = exe.split(".")
  if (splitted_exe[1] == "h" or splitted_exe[1] == "c"):
    print(exe)
    
>>> intra.h
>>> intra.c
>>> define.h
```

### 161. for문과 range 구문을 사용해서 0~99까지 한 라인에 하나씩 순차적으로 출력하는 프로그램을 작성하라.

```python
for i in range(100):
  print(i, end=' ') # 공백 옆에 이어서 출력하시오.

>>> 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 
```

### 162. 월드컵은 4년에 한 번 개최된다. range()를 사용하여 2002~2050년까지 중 월드컵이 개최되는 연도를 출력하라.

```python
2002
2006
2010
...
2042
2046
2050
```

(cf) range의 세번째 파라미터는 증감폭을 결정합니다.

```python
print(list(range(0, 10, 2)))

>>> [0, 2, 4, 6, 8]
```

---


```python
for i in range(2002, 2051, 4):
  print(i)
  
>>> 2002
>>> 2006
>>> 2010
>>> 2014
>>> 2018
>>> 2022
>>> 2026
>>> 2030
>>> 2034
>>> 2038
>>> 2042
>>> 2046
>>> 2050
```

### 163. 1부터 30까지의 숫자 중 3의 배수를 출력하라.

1부터 30까지의 숫자를 i에 저장한 뒤, i에 저장된 값이 3으로 나누었을 때 나머지가 0인 경우(3의 배수인 경우), 출력하게 만드는 방법

```python
for i in range(1, 31):
  if i % 3 == 0:
    print(i)

>>> 3
>>> 6
>>> 9
>>> 12
>>> 15
>>> 18
>>> 21
>>> 24
>>> 27
>>> 30
```

**1부터 10까지의 숫자를 i에 저장한 뒤, 3을 곱하여 출력하는 방법**
+ 이 방법은 문제에서 요구하는 방법이 아님에 주의하라.
+ ('cause 이 방법은 30까지의 3의 배수를 생성하여 출력하는 문제에 대한 답이기 때문이다.)

```python
for i in range(1, 11):
  print(3 * i)

>>> 3
>>> 6
>>> 9
>>> 12
>>> 15
>>> 18
>>> 21
>>> 24
>>> 27
>>> 30
```

### 164. 99부터 0까지 1씩 감소하는 숫자들을, 한 라인에 하나씩 출력하라.

```python
for i in range(0, 99):
  print(99 - i, end=' ')
  
>>> 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1
```

### 165. for문을 사용해서 아래와 같이 출력하라.

```python
0.0
0.1
0.2
0.3
0.4
0.5
...
0.9
```

---


```python
for i in range(10):
  print(i/10)

>>> 0.0
>>> 0.1
>>> 0.2
>>> 0.3
>>> 0.4
>>> 0.5
>>> 0.6
>>> 0.7
>>> 0.8
>>> 0.9
```

### 166. 구구단 3단을 출력하라.

```python
3x1 = 3
3x2 = 6
3x3 = 9
3x4 = 12
3x5 = 15
3x6 = 18
3x7 = 21
3x8 = 24
3x9 = 27
```

---


```python
for i in range(1,10):
  print('3x' + str(i), '=', 3*i)

>>> 3x1 = 3
>>> 3x2 = 6
>>> 3x3 = 9
>>> 3x4 = 12
>>> 3x5 = 15
>>> 3x6 = 18
>>> 3x7 = 21
>>> 3x8 = 24
>>> 3x9 = 27
```

### 167. 구구단 3단을 출력하라. 단 홀수 번째만 출력한다.

```python
3x1 = 3
3x3 = 9
3x5 = 15
3x7 = 21
3x9 = 27
```

---


```python
# my solution
for i in range(1, 10):
  if i % 2 != 0:
    print('3x' + str(i), '=', 3*i)
    
>>> 3x1 = 3
>>> 3x3 = 9
>>> 3x5 = 15
>>> 3x7 = 21
>>> 3x9 = 27
```

```python
# solution
num = 3
for i in range(1, 10, 2) :
    print (num, "x", i, " = ", num * i)

>>> 3 x 1  =  3
>>> 3 x 3  =  9
>>> 3 x 5  =  15
>>> 3 x 7  =  21
>>> 3 x 9  =  27
```

### 168. 1~10까지의 숫자에 대해 모두 더한 값을 출력하는 프로그램을 for 문을 사용하여 작성하라.

```python
합 : 55
```

---


```python
sum = 0
for num in range(11):
  sum += num
print("합 :",sum)

>>> 합 : 55
```

### 169. 1~10까지의 숫자 중 모든 홀수의 합을 출력하는 프로그램을 for 문을 사용하여 작성하라.

```python
합 : 25
```

---


```python
sum = 0
for num in range(11):
  if num % 2 != 0:
    sum += num
print('합 :',sum)

>>> 합 : 25
```

### 170. 1~10까지의 숫자를 모두 곱한 값을 출력하는 프로그램을 for 문을 사용하여 작성하라.

```python
mul = 1
for num in range(1, 11):
  mul *= num
print(mul)

>>> 3628800
```

### 171. 아래와 같이 리스트의 데이터를 출력하라. 단, for문과 range문을 사용하라.

```python
price_list = [32100, 32150, 32000, 32500]
```

```python
32100
32150
32000
32500
```

---


```python
# my solution
price_list = [32100, 32150, 32000, 32500]
for price in price_list: # for문 만 사용하여도 원하는 결과를 출력할 수 있습니다.
  print(price)

>>> 32100
>>> 32150
>>> 32000
>>> 32500
```

```python
# solution
for i in range(len(price_list)): # for문과 range문을 모두 사용한 답안입니다.
    print(price_list[i])
```

### 172. 아래와 같이 리스트의 데이터를 출력하라. 단, for문과 range문을 사용하라.

```python
price_list = [32100, 32150, 32000, 32500]
```

```python
0 32100
1 32150
2 32000
3 32500
```

---


```python
# my solution
price_list = [32100, 32150, 32000, 32500]
for index in range(len(price_list)):
  print(index, price_list[index])

>>> 0 32100
>>> 1 32150
>>> 2 32000
>>> 3 32500
```

```python
# solution
price_list = [32100, 32150, 32000, 32500]
for i, data in enumerate(price_list):
    print(i, data)
```

**enumerate**

+ 반복문 사용 시, 몇 번째 반복문인지 확인이 필요할 수 있습니다. 이때 사용됩니다.

+ 인덱스 번호와 컬렉션의 원소를 tuple 형태로 반환합니다.

```python
t = [1, 5, 7, 33, 39, 52]
for p in enumerate(t):
  print(p)
```

```python
(0, 1)
(1, 5)
(2, 7)
(3, 33)
(4, 39)
(5, 52)
```

+ tuple형태 반환을 이용하여 아래처럼 활용할 수 있습니다.

```python
for i, v in enumerate(t):
  print("index : {}, value: {}".format(i,v))
```

```python
index : 0, value: 1
index : 1, value: 5
index : 2, value: 7
index : 3, value: 33
index : 4, value: 39
index : 5, value: 52
```

### 173. 아래와 같이 리스트의 데이터를 출력하라. 단, for문과 range문을 사용하라.

```python
price_list = [32100, 32150, 32000, 32500]
```

```python
3 32100
2 32150
1 32000
0 32500
```

---


```python
price_list = [32100, 32150, 32000, 32500]
for index in range(len(price_list)):
  print((len(price_list)-1)-index, price_list[index])

>>> 3 32100
>>> 2 32150
>>> 1 32000
>>> 0 32500
```

### 174. 아래와 같이 리스트의 데이터를 출력하라. 단, for문과 range문을 사용하라.

```python
price_list = [32100, 32150, 32000, 32500]
```

```python
100 32150
110 32000
120 32500
```

---


```python
price_list = [32100, 32150, 32000, 32500]
for index in range(1, len(price_list)):
  print((90 + index*10), price_list[index])

>>> 100 32150
>>> 110 32000
>>> 120 32500
```

### 175. my_list를 아래와 같이 출력하라.

```python
my_list = ["가", "나", "다", "라"]
```

```python
가 나
나 다
다 라
```

---


```python
my_list = ["가", "나", "다", "라"]
for index in range(len(my_list)):
  if index < len(my_list) - 1:
    print(my_list[index], my_list[index+1])

>>> 가 나
>>> 나 다
>>> 다 라
```

### 176. 리스트를 아래와 같이 출력하라.

```python
my_list = ["가", "나", "다", "라", "마"]
```

```python
가 나 다
나 다 라
다 라 마
```

---


```python
my_list = ["가", "나", "다", "라", "마"]
for index in range(len(my_list)):
  if index < len(my_list) - 2:
    print(my_list[index], my_list[index+1], my_list[index+2])

>>> 가 나 다
>>> 나 다 라
>>> 다 라 마
```

### 177. 반복문과 range 함수를 사용해서 my_list를 아래와 같이 출력하라.

```python
my_list = ["가", "나", "다", "라"]
```

```python
라 다
다 나
나 가
```

---


```python
my_list = ["가", "나", "다", "라"]
for index in range(len(my_list)):
  if 0 < index < len(my_list):
    print(my_list[len(my_list)-index], my_list[len(my_list)-(index+1)])

>>> 라 다
>>> 다 나
>>> 나 가
```

### 178. 리스트에는 네 개의 정수가 저장되어 있다. 각각의 데이터에 대해서 자신과 우측값과의 차분값을 화면에 출력하라.

```python
my_list = [100, 200, 400, 800]
```

예를들어 100을 기준으로 우측에 위치한 200과의 차분 값를 화면에 출력하고, 200을 기준으로 우측에 위치한 400과의 차분값을 화면에 출력한다. 이어서 400을 기준으로 우측에 위치한 800과의 차분값을 화면에 출력한다.

```python
100
200
400
```

---


```python
my_list = [100, 200, 400, 800]
for i in range(len(my_list)):
  if i < len(my_list) - 1:
    print(my_list[i+1]-my_list[i])

>>> 100
>>> 200
>>> 400
```

### 179. 리스트에는 6일 간의 종가 데이터가 저장되어 있다. 종가 데이터의 3일 이동 평균을 계산하고 이를 화면에 출력하라.

```python
my_list = [100, 200, 400, 800, 1000, 1300]
```

첫 번째 줄에는 100, 200, 400의 평균값이 출력된다. 두 번째 줄에는 200, 400, 800의 평균값이 출력된다. 같은 방식으로 나머지 데이터의 평균을 출력한다.

```python
233.33333333333334
466.6666666666667
733.3333333333334
1033.3333333333333
```

---


```python
# my solution
my_list = [100, 200, 400, 800, 1000, 1300]
for i in range(len(my_list)):
  if i < len(my_list) - 2:
    avg = (my_list[i]+my_list[i+1]+my_list[i+2]) / 3
    print(avg)
    if i > 5:
      break

>>> 233.33333333333334
>>> 466.6666666666667
>>> 733.3333333333334
>>> 1033.3333333333333
```

```python
# solution
my_list = [100, 200, 400, 800, 1000, 1300]
for i in range(1, len(my_list) - 1):
    print(abs(my_list[i-1] + my_list[i] + my_list[i+1]) / 3)

>>> 233.33333333333334
>>> 466.6666666666667
>>> 733.3333333333334
>>> 1033.3333333333333
```

### 180. 리스트에 5일간의 저가, 고가 정보가 저장돼 있다. 고가와 저가의 차를 변동폭이라고 정의할 때, low, high 두 개의 리스트를 사용해서 5일간의 변동폭을 volatility 리스트에 저장하라.

```python
low_prices  = [100, 200, 400, 800, 1000]
high_prices = [150, 300, 430, 880, 1000]
```

---


```python
low_prices  = [100, 200, 400, 800, 1000]
high_prices = [150, 300, 430, 880, 1000]
volatility = []
for i in range(len(low_prices)):
  volatility.append(high_prices[i] - low_prices[i])
print(volatility)

>>> [50, 100, 30, 80, 0]
```

### 181. 아래 표에서 하나의 행을 하나의 리스트로, 총 3개의 리스트를 갖는 이차원 리스트 apart를 정의하라.

|1호 라인 |2호 라인 |
|:--:|:--:|
|101호	|102호 |
|201호	|202호 |
|301호	|302호 |

---


```python
apart = [['101호', '102호'], ['201호', '202호'], ['301호', '302호']]
```

### 182. 아래 표에서 하나의 열을 하나의 리스트로, 총 2개의 리스트를 갖는 이차원 리스트 stock을 정의하라.

|시가	|종가 |
|:--:|:--:|
|100	|80 |
|200	|210 |
|300	|330 |

---


```python
stock = [["시가", 100, 200, 300], ["종가", 80, 210, 330]]
```

### 183. 아래 표를 stock 이름의 딕셔너리로 표현하라.시가를 key로 저장하고, 나머지 같은 열의 데이터를 리스트로 저장해서 value로 저장한다. 종가 역시 key로 저장하고 나머지 같은 열의 데이터를 리스트로 저장해서 value로 저장한다.

|시가	|종가 |
|:--:|:--:|
|100	|80 |
|200	|210 |
|300	|330 |

---


```python
stock = {'시가': [100, 200, 300], '종가' :[80, 210, 330] }
```

### 184. 아래 표를 stock 이라는 이름의 딕셔너리로 표현하라. 날짜를 key로 저장하고, 나머지 같은 행의 데이터를 리스트로 저장해서 value로 저장한다. 첫 열이 날짜이다.


10/10	80	110	70	90
10/11	210	230	190	200

---


```python
stock = {'10/10': [80, 110, 70, 90], '10/11': [210, 230, 190, 200]}
```

### 185. 리스트에 저장된 데이터를 아래와 같이 출력하라.

```python
apart = [ [101, 102], [201, 202], [301, 302] ]
```

```python
101 호
102 호
201 호
202 호
301 호
302 호
```

---


```python
# my solution
apart = [ [101, 102], [201, 202], [301, 302] ]
for i in [0, 1, 2]:
  for j in [0, 1]:
    print(apart[i][j], "호")

>>> 101 호
>>> 102 호
>>> 201 호
>>> 202 호
>>> 301 호
>>> 302 호
```

```python
# solutoin
for row in apart:
    for col in row:
        print(col, "호")
```

### 186. 리스트에 저장된 데이터를 아래와 같이 출력하라.

```python
apart = [ [101, 102], [201, 202], [301, 302] ]
```

```python
301 호
302 호
201 호
202 호
101 호
102 호
```

---


```python
apart = [ [101, 102], [201, 202], [301, 302] ]
for floor in apart[::-1]:
  for room_num in floor:
    print(room_num, "호")

>>> 301 호
>>> 302 호
>>> 201 호
>>> 202 호
>>> 101 호
>>> 102 호
```

### 187. 리스트에 저장된 데이터를 아래와 같이 출력하라.

```python
apart = [ [101, 102], [201, 202], [301, 302] ]
```

```python
302 호
301 호
202 호
201 호
102 호
101 호
```

---


```python
apart = [ [101, 102], [201, 202], [301, 302] ]
for floor in apart[::-1]:
  for room_num in floor[::-1]:
    print(room_num, "호")

>>> 302 호
>>> 301 호
>>> 202 호
>>> 201 호
>>> 102 호
>>> 101 호
```

### 188. 리스트에 저장된 데이터를 아래와 같이 출력하라.

```python
apart = [ [101, 102], [201, 202], [301, 302] ]
```

```python
101 호
-----
102 호
-----
201 호
-----
202 호
-----
301 호
-----
302 호
-----
```

---


```python
apart = [ [101, 102], [201, 202], [301, 302] ]
for floor in apart:
  for room_num in floor:
    print(room_num, "호")
    print("-----")

>>> 101 호
>>> -----
>>> 102 호
>>> -----
>>> 201 호
>>> -----
>>> 202 호
>>> -----
>>> 301 호
>>> -----
>>> 302 호
>>> -----
```

### 189. 리스트에 저장된 데이터를 아래와 같이 출력하라.

```python
apart = [ [101, 102], [201, 202], [301, 302] ]
```

```python
101 호
102 호
-----
201 호
202 호
-----
301 호
302 호
-----
```

---


```python
apart = [ [101, 102], [201, 202], [301, 302] ]
for floor in apart:
  for room_num in floor:
    print(room_num, "호")
  print("-----")

>>> 101 호
>>> 102 호
>>> -----
>>> 201 호
>>> 202 호
>>> -----
>>> 301 호
>>> 302 호
>>> -----
```

### 190. 리스트에 저장된 데이터를 아래와 같이 출력하라.

```python
apart = [ [101, 102], [201, 202], [301, 302] ]
```

```python
101 호
102 호
201 호
202 호
301 호
302 호
-----
```

---


```python
apart = [ [101, 102], [201, 202], [301, 302] ]
for floor in apart:
  for room_num in floor:
    print(room_num, "호")
print("-----")

>>> 101 호
>>> 102 호
>>> 201 호
>>> 202 호
>>> 301 호
>>> 302 호
>>> -----
```

### 191. data에는 매수한 종목들의 OHLC (open/high/low/close) 가격 정보가 바인딩 되어있다.

```python
data = [
    [ 2000,  3050,  2050,  1980],
    [ 7500,  2050,  2050,  1980],
    [15450, 15050, 15550, 14900]
]
```

수수료를 0.014 %로 가정할 때, 각 가격에 수수료를 포함한 가격을 한라인에 하나씩 출력하라.

```python
2000.28
3050.427
2050.2870000000003
...
```

---


```python
data = [
    [ 2000,  3050,  2050,  1980],
    [ 7500,  2050,  2050,  1980],
    [15450, 15050, 15550, 14900]
]
for row in data:
  for col in row:
    print(float(col) * 1.00014)

>>> 2000.28
>>> 3050.427
>>> 2050.2870000000003
>>> 1980.2772
>>> 7501.05
>>> 2050.2870000000003
>>> 2050.2870000000003
>>> 1980.2772
>>> 15452.163
>>> 15052.107
>>> 15552.177
>>> 14902.086000000001
```

### 192. 191번의 출력 결과에 행단위로 "----" 구분자를 추가하라.

```python
2000.28
3050.427
2050.2870000000003
1980.2772
----
7501.05
2050.2870000000003
2050.2870000000003
1980.2772
----
15452.163
15052.107
15552.177
14902.086000000001
----
```

---


```python
data = [
    [ 2000,  3050,  2050,  1980],
    [ 7500,  2050,  2050,  1980],
    [15450, 15050, 15550, 14900]
]
for row in data:
  for col in row:
    print(float(col) * 1.00014)
  print('----')
  
>>> 2000.28
>>> 3050.427
>>> 2050.2870000000003
>>> 1980.2772
>>> ----
>>> 7501.05
>>> 2050.2870000000003
>>> 2050.2870000000003
>>> 1980.2772
>>> ----
>>> 15452.163
>>> 15052.107
>>> 15552.177
>>> 14902.086000000001
>>> ----
```

### 193. 192 번 문제의 결괏값을 result 이름의 리스트에 1차원 배열로 저장하라.

```python
print(result)

>>> [2000.28, 3050.427, 2050.2870000000003, 1980.2772, 7501.05, 2050.2870000000003, 2050.2870000000003, ...]
```

---


```python
data = [
    [ 2000,  3050,  2050,  1980],
    [ 7500,  2050,  2050,  1980],
    [15450, 15050, 15550, 14900]
]
result = []
for row in data:
  for col in row:
    result.append(float(col) * 1.00014)
print(result)

>>> [2000.28, 3050.427, 2050.2870000000003, 1980.2772, 7501.05, 2050.2870000000003, 2050.2870000000003, 1980.2772, 15452.163, 15052.107, 15552.177, 14902.086000000001]
```

### 194. 191번 문제의 결괏값을 result 이름의 리스트에 2차원 배열로 저장하라. 저장 포맷은 아래와 같다. 각 행에 대한 데이터끼리 리스트에 저장되어야 한다.

```python
print(result)
```

```python
[
 [2000.28, 3050.427, 2050.2870000000003, 1980.2772],
 [7501.05, 2050.2870000000003, 2050.2870000000003, 1980.2772],
 [15452.163, 15052.107, 15552.177, 14902.086000000001]
]
```

---


```python
data = [
    [ 2000,  3050,  2050,  1980],
    [ 7500,  2050,  2050,  1980],
    [15450, 15050, 15550, 14900]
]
result = []
for row in data:
  sub = []
  for col in row:
    sub.append(float(col) * 1.00014)
  result.append(sub)
print(result)

>>> [[2000.28, 3050.427, 2050.2870000000003, 1980.2772], [7501.05, 2050.2870000000003, 2050.2870000000003, 1980.2772], [15452.163, 15052.107, 15552.177, 14902.086000000001]]
```

### 195. ohlc 리스트에는 시가(open), 고가 (high), 저가 (low) , 종가(close)가 날짜별로 저장돼 있다. 화면에 종가데이터를 출력하라.

```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
```

```python
100
190
310
```

---


```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
for day_price in ohlc[1:]: # label 생략
  print(day_price[3]) # 각각의 day_price에서 index = 3인 값들이 출력됨

>>> 100
>>> 190
>>> 310
```

### 196. ohlc 리스트에는 시가(open), 고가 (high), 저가 (low) , 종가(close)가 날짜별로 저장돼 있다. 종가가 150원보다 큰경우에만 종가를 출력하라.

```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
```

```python
190
310
```

---


```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
for day_price in ohlc[1:]:
  if day_price[3] > 150:
    print(day_price[3])

>>> 190
>>> 310
```

### 197. ohlc 리스트에는 시가(open), 고가 (high), 저가 (low) , 종가(close)가 날짜별로 저장돼 있다. 종가가 시가 보다 크거나 같은 경우에만 종가를 출력하라.

```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
```

```python
100
310
```

---


```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
for day_price in ohlc[1:]:
  if day_price[3] >= day_price[0]:
    print(day_price[3])

>>> 100
>>> 310
```

### 198. ohlc 리스트에는 시가(open), 고가 (high), 저가 (low) , 종가(close)가 날짜별로 저장돼 있다. 고가와 저가의 차이를 변동폭으로 정의할 때 변동폭을 volatility 이름의 리스트에 저장하라.

```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
```

```python
print(volatility)
```

```python
[40, 30, 10]
```

---


```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
volatility = []
for day_price in ohlc[1:]:
  volatility.append(day_price[1]-day_price[2])
print(volatility)

>>> [40, 30, 10]
```

### 199. 리스트에는 3일 간의 ohlc 데이터가 저장돼 있다. 종가가 시가보다 높은 날의 변동성 (고가 - 저가)을 화면에 출력하라.

```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
```

종가가 시가보다 높은 거래일의 OHLC는 [300, 310, 300, 310] 이다. 따라서 이 거래일의 변동성은 10 (310 - 300)이다.

```python
10
```

---


```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
for day_price in ohlc[1:]:
  if day_price[3]-day_price[0] > 0:
    print(day_price[3]-day_price[0])

>>> 10
```

### 200. 리스트에는 3일 간의 ohlc 데이터가 저장돼 있다. 시가에 매수해서 종가에 매도 했을 경우 총 수익금을 계산하라.

```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
```

1일차 수익 0원 (100 - 100), 2일차 수익 -10원 (190 - 200), 3일차 수익 10원 (310 - 300) 이다.

```python
0
```

---


```python
ohlc = [["open", "high", "low", "close"],
        [100, 110, 70, 100],
        [200, 210, 180, 190],
        [300, 310, 300, 310]]
total_revenue = 0
for day_price in ohlc[1:]:
  total_revenue += day_price[3]-day_price[0]
print(total_revenue)

>>> 0
```
